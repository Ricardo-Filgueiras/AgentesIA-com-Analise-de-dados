from langchain_google_genai import ChatGoogleGenerativeAI
import streamlit as st
import pandas as pd
import os
from ferramenta import *


st.set_page_config(page_title="Assistente de an√°lise de dados com IA", layout="centered")
st.title("ü¶ú Assistente de an√°lise de dados com IA")


# Descri√ß√£o da ferramenta
st.info("""
Este assistente utiliza um agente, criado com Langchain, para te ajudar a explorar, analisar e visualizar dados de forma interativa. Basta fazer o upload de um arquivo CSV e voc√™ poder√°:

- **Gerar relat√≥rios autom√°ticos**:
    - **Relat√≥rio de informa√ß√µes gerais**: apresenta a dimens√£o do DataFrame, nomes e tipos das colunas, contagem de dados nulos e duplicados, al√©m de sugest√µes de tratamentos e an√°lises adicionais.
    - **Relat√≥rio de estat√≠sticas descritivas**: exibe valores como m√©dia, mediana, desvio padr√£o, m√≠nimo e m√°ximo; identifica poss√≠veis outliers e sugere pr√≥ximos passos com base nos padr√µes detectados.
- **‚ú®Fazer perguntas simples sobre os dados**: como "Qual √© a m√©dia da coluna X?", "Quantos registros existem para cada categoria da coluna Y?".
- **ü§ñ**Criar gr√°ficos automaticamente** com base em perguntas em linguagem natural.

Ideal para analistas, cientistas de dados e equipes que buscam agilidade e insights r√°pidos com apoio de IA.
""")

# Upload do CSV
st.markdown("### üìÅ Fa√ßa upload do seu arquivo CSV")
arquivo_carregado = st.file_uploader("Selecione um arquivo CSV", type="csv", label_visibility="collapsed")

if arquivo_carregado:
    df = pd.read_csv(arquivo_carregado)
    st.success("Arquivo carregado com sucesso!")
    st.markdown("### Primeiras linhas do DataFrame")
    st.dataframe(df.head())

    # Obtenha a chave da API do Google
    GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')

    # Configurando o modelo LLM
    llm = ChatGoogleGenerativeAI(
        model="gemini-2.0-flash",
        api_key=GOOGLE_API_KEY,
        max_output_tokens=1024,
        temperature=0.1
    )

    # Ferramentas
    tools = criar_ferramentas(df)

    # Prompt react
    df_head = df.head().to_markdown()

    prompt_react_pt = PromptTemplate(
        input_variables=["input", "agent_scratchpad", "tools", "tool_names", "df_head"],
        template="""
    Voc√™ √© um assistente que sempre responde em portugu√™s.

    Voc√™ tem acesso a um dataframe pandas chamado `df`.
    Aqui est√£o as primeiras linhas do Dataframe, obtidas com `df.head().to_markdown()`:
    {df_head}

    Responda √†s seguintes perguntas da melhor forma poss√≠vel.

    Para isso, voc√™ tem acesso √†s seguintes ferramentas:
    {tools}

    Use o seguinte formato:

    Question: a pergunta de entrada que voc√™ deve responder
    Thought: voc√™ deve sempre pensar no que fazer
    Action: a a√ß√£o a ser tomada, deve ser uma das [{tool_names}]
    Action Input: a entrada para a a√ß√£o
    Observation: o resultado da a√ß√£o
    ... (este Thought/Action/Action Input/Observation pode se repetir N vezes)
    Thought: Agora eu sei a resposta final
    Final Answer: a resposta final para a pergunta de entrada original.
    Quando usar a ferramenta_python: formate sua resposta final de forma clara, em lista, com valores

    Comece!

    Question: {input}
    Thought: {agent_scratchpad}"""
    )
    # Agente
    agente = create_react_agent(llm=llm, tools=tools, prompt=prompt_react_pt)
    orquestrador = AgentExecutor(agent=agente,
                                tools=tools,
                                verbose=True,
                                handle_parsing_errors=True)


